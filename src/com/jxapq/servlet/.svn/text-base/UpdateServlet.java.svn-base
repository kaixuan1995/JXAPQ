package com.jxapq.servlet;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jxapq.servlet.util.AnaysisXmlTool;
import com.jxapq.servlet.util.LinkStringTool;

public class UpdateServlet extends HttpServlet {
	String filePath = null;
	AnaysisXmlTool axt = null;
	String value = null;
	String viewName = null;
	String methodName = null;
	String serviceName = null;
	String forwardName = null;

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);

	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		// 读取xml，得到Control.xml的路径
		filePath = getServletContext().getRealPath(
				"/WEB-INF/classes/com/jxapq/config/Control.xml");
		// new 出工具类的对象引用
		axt = new AnaysisXmlTool(filePath);// 解析Control.xml工具
		// 得到一个属性值字符串，往下传
		value = LinkStringTool.connectStr(request);
		System.out.println("表单字符串：" + value);
		// 得到视图名，可以往下传
		viewName = request.getParameter("view");// 视图名
		// 得到操作方法，往下传
		methodName = request.getParameter("method");// 操作名
		// 根据viewName判断调用的service名
		serviceName = axt.getViewName(viewName, "serviceName");
		forwardName = axt.getViewName(viewName, "forward");// 根据viewName判断调用的要转发页面名

		try {
			Method method = this.getClass().getDeclaredMethod(methodName,
					HttpServletRequest.class, HttpServletResponse.class);
			method.invoke(this, request, response);
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			System.out.println("方法名没找到");
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}

	}
	
	
	@SuppressWarnings("unused")
	private void add(HttpServletRequest request,HttpServletResponse response) {
		Class<?> clazz;
		try {
			clazz = Class.forName(serviceName);
			Method actionMethod = clazz.getMethod("action", String.class,
					String.class, String.class);
			
			boolean boo = (Boolean) actionMethod.invoke(
					clazz.newInstance(), viewName, value, methodName);
			if(boo) {
				request.setAttribute("message", "添加保护区信息成功");
				request.getRequestDispatcher(forwardName).forward(request, response);
			}else {
				request.setAttribute("message", "系统正忙，请稍后再试");
				request.getRequestDispatcher(forwardName).forward(request, response);
			}
		} catch (ClassNotFoundException e) {
			System.out.println("没有找到"+serviceName);
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ServletException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
